in_source: |
  port:
      word 1

  start:
      lit 999             ; i
  outer_loop:
      dup                 ; i i
      lit 100             ; i i 100
      sub                 ; i i-100
      lit end_outer       ; i i-100 end_outer
      swap                ; i end_outer i-100
      jn                  ; i
      lit 999             ; i j
  inner_loop:
      dup                 ; i j j
      lit 100             ; i j j 100
      sub                 ; i j j-100
      lit end_inner       ; i j j-100 end_inner
      swap                ; i j end_inner j-100
      jn                  ; i j

      swap                ; j i
      over                ; i j i
      swap                ; i i j
      over                ; i j i j
      mul                 ; i j i*j

      dup                 ; i j i*j i*j
      lit is_palindrome   ; i j i*j i*j is_palindrome
      call                ; i j i*j is_palindrome_res
      lit found           ; i j i*j is_palindrome_res found
      swap                ; i j i*j found is_palindrome_res
      jz                  ; i j i*j

      drop                ; i j
      dec                 ; i j-1
      lit inner_loop      ; i j-1 inner_loop
      jump                ; i j-1
  end_inner:
      drop                ; i
      dec                 ; i-1
      lit outer_loop      ; i-1 outer_loop
      jump                ; i-1
  end_outer:
      inc                 ; i+1
      dup                 ; i+1 i+1
      mul                 ; i+1*i+1
      lit end             ; i+1*i+1 end
      jump                ; i+1*i+1
  found:
      swap                ; i i*j j
      drop                ; i i*j
      swap                ; i*j i
      drop                ; i*j
  end:
      lit print_number    ; i*j print_number
      call                ; 
      halt

  ; is_palindrome => 0 if yes, else non-zero
  orig:
      word 0
  rev:
      word 0
  is_palindrome:
      dup                         ; arg arg
      lit orig                    ; arg arg orig_addr
      store                       ; arg
      lit 0                       ; arg 0
      lit rev                     ; arg 0 rev_addr
      store                       ; arg
  is_palindrome_loop:
      dup                         ; arg arg
      lit palindrome_check        ; arg arg palindrome_check
      swap                        ; arg palindrome_check arg
      jz                          ; arg

      dup                         ; arg arg
      lit 10                      ; arg arg 10
      mod                         ; arg arg%10

      lit rev                     ; arg arg%10 rev_addr
      load                        ; arg arg%10 rev
      lit 10                      ; arg arg%10 rev 10
      mul                         ; arg arg%10 rev*10

      add                         ; arg arg%10+rev*10
      lit rev                     ; arg arg%10+rev*10 rev_addr
      store                       ; arg

      lit 10                      ; arg 10
      div                         ; arg/10
      lit is_palindrome_loop      ; arg/10 is_palindrome_loop
      jump                        ; arg/10
  palindrome_check:
      drop                        ;
      lit orig                    ; orig_addr
      load                        ; orig
      lit rev                     ; orig rev_addr
      load                        ; orig rev
      sub                         ; orig-rev
      ret

  print_digit:
      lit 48              ; arg 48
      add                 ; arg -> char
      lit port            ; char port_addr
      load                ; char port
      out                 ;
      ret                 ;
  print_number:
      lit -1              ; num -1
      swap                ; -1 num
      dup                 ; -1 num num
      lit negate          ; -1 num num negate
      swap                ; -1 num negate num
      jn                  ; -1 num
      lit loop1           ; -1 num loop1
      jump                ; -1 num
  negate:
      lit 45              ; [...] 45
      lit port            ; [...] 45 port_a
      load                ; [...] 45 port
      out                 ; [...]
      lit -1              ; 0 num -1
      mul                 ; 0 -num -> num
  loop1:
      dup                 ; 0 num num
      lit 10              ; 0 num num 10
      mod                 ; 0 num digit
      swap                ; 0 digit num
      lit 10              ; 0 digit num 10
      div                 ; 0 digit num/10 -> num
      over                ; 0 num digit num
      lit loop1exit       ; [...] num loop2
      swap                ; [...] loop2 num
      jz                  ; [...] num digit
      swap
      lit loop1           ; [...] num loop1
      jump                ; [...] num
  loop1exit:
      swap                ; [...] 0 digit
      drop                ; [...] digit
  loop2:
      dup                 ; digit digit
      lit break           ; digit digit break
      swap                ; digit break digit
      jn                  ; digit
      lit print_digit     ; digit print_digit
      call                ; digit
      lit loop2           ; loop2
      jump                ;
  break:
      ret                 ;
in_stdin: |
  <no input>
out_stdout: |-
  906609
out_log: |
  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 1 --> LIT 993

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 0 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 1): [0 | ]

  Return stack (size = 0): []

  PC: 1 AR: 1 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 1 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 1): [0 | ]

  Return stack (size = 0): []

  PC: 1 AR: 1 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 2 -- MPC: 3 / MicroInstruction: DataStackPush, LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 2): [0 | 0]

  Return stack (size = 0): []

  PC: 1 AR: 1 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 3 -- MPC: 4 / MicroInstruction: LatchTOS, TOSSelectMemory, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 2): [993 | 0]

  Return stack (size = 0): []

  PC: 2 AR: 1 BR: 0

  MEMORY READ VALUE: AR: 1 ---> OperandInstruction(opcode=LIT, operand=993)



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 2 --> DUP

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 4 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 2): [993 | 0]

  Return stack (size = 0): []

  PC: 2 AR: 2 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 5 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 2): [993 | 0]

  Return stack (size = 0): []

  PC: 2 AR: 2 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 6 -- MPC: 26 / MicroInstruction: DataStackPush, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 3): [993 | 993, 0]

  Return stack (size = 0): []

  PC: 3 AR: 2 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 3 --> LIT 100

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 7 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [993 | 993, 0]

  Return stack (size = 0): []

  PC: 3 AR: 3 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 8 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 3): [993 | 993, 0]

  Return stack (size = 0): []

  PC: 3 AR: 3 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 9 -- MPC: 3 / MicroInstruction: DataStackPush, LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [993 | 993, 993, 0]

  Return stack (size = 0): []

  PC: 3 AR: 3 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 10 -- MPC: 4 / MicroInstruction: LatchTOS, TOSSelectMemory, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 4): [100 | 993, 993, 0]

  Return stack (size = 0): []

  PC: 4 AR: 3 BR: 0

  MEMORY READ VALUE: AR: 3 ---> OperandInstruction(opcode=LIT, operand=100)



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 4 --> SUB

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 11 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [100 | 993, 993, 0]

  Return stack (size = 0): []

  PC: 4 AR: 4 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 12 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 4): [100 | 993, 993, 0]

  Return stack (size = 0): []

  PC: 4 AR: 4 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 13 -- MPC: 14 / MicroInstruction: ALUSub, ALULeftOPDataStack, TOSSelectALU, LatchTOS, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [893 | 993, 993, 0]

  Return stack (size = 0): []

  PC: 4 AR: 4 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 14 -- MPC: 15 / MicroInstruction: DataStackPop, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 3): [893 | 993, 0]

  Return stack (size = 0): []

  PC: 5 AR: 4 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 5 --> LIT 34

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 15 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [893 | 993, 0]

  Return stack (size = 0): []

  PC: 5 AR: 5 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 16 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 3): [893 | 993, 0]

  Return stack (size = 0): []

  PC: 5 AR: 5 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 17 -- MPC: 3 / MicroInstruction: DataStackPush, LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [893 | 893, 993, 0]

  Return stack (size = 0): []

  PC: 5 AR: 5 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 18 -- MPC: 4 / MicroInstruction: LatchTOS, TOSSelectMemory, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 4): [34 | 893, 993, 0]

  Return stack (size = 0): []

  PC: 6 AR: 5 BR: 0

  MEMORY READ VALUE: AR: 5 ---> OperandInstruction(opcode=LIT, operand=34)



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 6 --> SWAP

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 19 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [34 | 893, 993, 0]

  Return stack (size = 0): []

  PC: 6 AR: 6 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 20 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 4): [34 | 893, 993, 0]

  Return stack (size = 0): []

  PC: 6 AR: 6 BR: 0



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 21 -- MPC: 27 / MicroInstruction: LatchBR, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [34 | 893, 993, 0]

  Return stack (size = 0): []

  PC: 6 AR: 6 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 22 -- MPC: 28 / MicroInstruction: DataStackPop, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [34 | 993, 0]

  Return stack (size = 0): []

  PC: 6 AR: 6 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 23 -- MPC: 29 / MicroInstruction: DataStackPush, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [34 | 34, 993, 0]

  Return stack (size = 0): []

  PC: 6 AR: 6 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 24 -- MPC: 30 / MicroInstruction: LatchTOS, TOSSelectBR, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 4): [893 | 34, 993, 0]

  Return stack (size = 0): []

  PC: 7 AR: 6 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 7 --> JN

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 25 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [893 | 34, 993, 0]

  Return stack (size = 0): []

  PC: 7 AR: 7 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 26 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 4): [893 | 34, 993, 0]

  Return stack (size = 0): []

  PC: 7 AR: 7 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 27 -- MPC: 48 / MicroInstruction: LatchPC, PCJumpTypeJN, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [893 | 34, 993, 0]

  Return stack (size = 0): []

  PC: 8 AR: 7 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 28 -- MPC: 49 / MicroInstruction: DataStackPop, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [893 | 993, 0]

  Return stack (size = 0): []

  PC: 8 AR: 7 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 29 -- MPC: 50 / MicroInstruction: LatchTOS, TOSSelectDS, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [993 | 993, 0]

  Return stack (size = 0): []

  PC: 8 AR: 7 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 30 -- MPC: 51 / MicroInstruction: DataStackPop, LatchMPCounter, MicroProgramCounterZero 

  Stack (size = 2): [993 | 0]

  Return stack (size = 0): []

  PC: 8 AR: 7 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 8 --> LIT 913

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 31 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 2): [993 | 0]

  Return stack (size = 0): []

  PC: 8 AR: 8 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 32 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 2): [993 | 0]

  Return stack (size = 0): []

  PC: 8 AR: 8 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 33 -- MPC: 3 / MicroInstruction: DataStackPush, LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [993 | 993, 0]

  Return stack (size = 0): []

  PC: 8 AR: 8 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 34 -- MPC: 4 / MicroInstruction: LatchTOS, TOSSelectMemory, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 3): [913 | 993, 0]

  Return stack (size = 0): []

  PC: 9 AR: 8 BR: 893

  MEMORY READ VALUE: AR: 8 ---> OperandInstruction(opcode=LIT, operand=913)



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 9 --> DUP

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 35 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [913 | 993, 0]

  Return stack (size = 0): []

  PC: 9 AR: 9 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 36 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 3): [913 | 993, 0]

  Return stack (size = 0): []

  PC: 9 AR: 9 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 37 -- MPC: 26 / MicroInstruction: DataStackPush, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 4): [913 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 10 AR: 9 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 10 --> LIT 100

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 38 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [913 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 10 AR: 10 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 39 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 4): [913 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 10 AR: 10 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 40 -- MPC: 3 / MicroInstruction: DataStackPush, LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 5): [913 | 913, 913, 993]

  Return stack (size = 0): []

  PC: 10 AR: 10 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 41 -- MPC: 4 / MicroInstruction: LatchTOS, TOSSelectMemory, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 5): [100 | 913, 913, 993]

  Return stack (size = 0): []

  PC: 11 AR: 10 BR: 893

  MEMORY READ VALUE: AR: 10 ---> OperandInstruction(opcode=LIT, operand=100)



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 11 --> SUB

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 42 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 5): [100 | 913, 913, 993]

  Return stack (size = 0): []

  PC: 11 AR: 11 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 43 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 5): [100 | 913, 913, 993]

  Return stack (size = 0): []

  PC: 11 AR: 11 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 44 -- MPC: 14 / MicroInstruction: ALUSub, ALULeftOPDataStack, TOSSelectALU, LatchTOS, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 5): [813 | 913, 913, 993]

  Return stack (size = 0): []

  PC: 11 AR: 11 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 45 -- MPC: 15 / MicroInstruction: DataStackPop, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 4): [813 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 12 AR: 11 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 12 --> LIT 30

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 46 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [813 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 12 AR: 12 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 47 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 4): [813 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 12 AR: 12 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 48 -- MPC: 3 / MicroInstruction: DataStackPush, LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 5): [813 | 813, 913, 993]

  Return stack (size = 0): []

  PC: 12 AR: 12 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 49 -- MPC: 4 / MicroInstruction: LatchTOS, TOSSelectMemory, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 5): [30 | 813, 913, 993]

  Return stack (size = 0): []

  PC: 13 AR: 12 BR: 893

  MEMORY READ VALUE: AR: 12 ---> OperandInstruction(opcode=LIT, operand=30)



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 13 --> SWAP

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 50 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 5): [30 | 813, 913, 993]

  Return stack (size = 0): []

  PC: 13 AR: 13 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 51 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 5): [30 | 813, 913, 993]

  Return stack (size = 0): []

  PC: 13 AR: 13 BR: 893



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 52 -- MPC: 27 / MicroInstruction: LatchBR, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 5): [30 | 813, 913, 993]

  Return stack (size = 0): []

  PC: 13 AR: 13 BR: 813



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 53 -- MPC: 28 / MicroInstruction: DataStackPop, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [30 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 13 AR: 13 BR: 813



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 54 -- MPC: 29 / MicroInstruction: DataStackPush, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 5): [30 | 30, 913, 993]

  Return stack (size = 0): []

  PC: 13 AR: 13 BR: 813



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 55 -- MPC: 30 / MicroInstruction: LatchTOS, TOSSelectBR, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 5): [813 | 30, 913, 993]

  Return stack (size = 0): []

  PC: 14 AR: 13 BR: 813



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 14 --> JN

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 56 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 5): [813 | 30, 913, 993]

  Return stack (size = 0): []

  PC: 14 AR: 14 BR: 813



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 57 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 5): [813 | 30, 913, 993]

  Return stack (size = 0): []

  PC: 14 AR: 14 BR: 813



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 58 -- MPC: 48 / MicroInstruction: LatchPC, PCJumpTypeJN, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 5): [813 | 30, 913, 993]

  Return stack (size = 0): []

  PC: 15 AR: 14 BR: 813



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 59 -- MPC: 49 / MicroInstruction: DataStackPop, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [813 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 15 AR: 14 BR: 813



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 60 -- MPC: 50 / MicroInstruction: LatchTOS, TOSSelectDS, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [913 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 15 AR: 14 BR: 813



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 61 -- MPC: 51 / MicroInstruction: DataStackPop, LatchMPCounter, MicroProgramCounterZero 

  Stack (size = 3): [913 | 993, 0]

  Return stack (size = 0): []

  PC: 15 AR: 14 BR: 813



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 15 --> SWAP

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 62 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [913 | 993, 0]

  Return stack (size = 0): []

  PC: 15 AR: 15 BR: 813



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 63 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 3): [913 | 993, 0]

  Return stack (size = 0): []

  PC: 15 AR: 15 BR: 813



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 64 -- MPC: 27 / MicroInstruction: LatchBR, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [913 | 993, 0]

  Return stack (size = 0): []

  PC: 15 AR: 15 BR: 993



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 65 -- MPC: 28 / MicroInstruction: DataStackPop, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 2): [913 | 0]

  Return stack (size = 0): []

  PC: 15 AR: 15 BR: 993



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 66 -- MPC: 29 / MicroInstruction: DataStackPush, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [913 | 913, 0]

  Return stack (size = 0): []

  PC: 15 AR: 15 BR: 993



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 67 -- MPC: 30 / MicroInstruction: LatchTOS, TOSSelectBR, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 3): [993 | 913, 0]

  Return stack (size = 0): []

  PC: 16 AR: 15 BR: 993



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 16 --> OVER

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 68 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [993 | 913, 0]

  Return stack (size = 0): []

  PC: 16 AR: 16 BR: 993



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 69 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 3): [993 | 913, 0]

  Return stack (size = 0): []

  PC: 16 AR: 16 BR: 993



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 70 -- MPC: 31 / MicroInstruction: LatchBR, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [993 | 913, 0]

  Return stack (size = 0): []

  PC: 16 AR: 16 BR: 913



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 71 -- MPC: 32 / MicroInstruction: DataStackPop, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 2): [993 | 0]

  Return stack (size = 0): []

  PC: 16 AR: 16 BR: 913



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 72 -- MPC: 33 / MicroInstruction: DataStackPush, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [993 | 993, 0]

  Return stack (size = 0): []

  PC: 16 AR: 16 BR: 913



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 73 -- MPC: 34 / MicroInstruction: LatchTOS, TOSSelectBR, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [913 | 993, 0]

  Return stack (size = 0): []

  PC: 16 AR: 16 BR: 913



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 74 -- MPC: 35 / MicroInstruction: LatchBR, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 3): [913 | 993, 0]

  Return stack (size = 0): []

  PC: 16 AR: 16 BR: 993



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 75 -- MPC: 36 / MicroInstruction: DataStackPush, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [913 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 16 AR: 16 BR: 993



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 76 -- MPC: 37 / MicroInstruction: LatchTOS, TOSSelectBR, LatchMPCounter, MicroProgramCounterZero, LatchPC, PCJumpTypeNext 

  Stack (size = 4): [993 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 17 AR: 16 BR: 993



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - NOW EXECUTING INSTRUCTION PC: 17 --> SWAP

  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 77 -- MPC: 0 / MicroInstruction: LatchAR, ARSelectPC, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [993 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 17 AR: 17 BR: 993



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 78 -- MPC: 1 / MicroInstruction: LatchMPCounter, MicroProgramCounterOpcode 

  Stack (size = 4): [993 | 913, 993, 0]

  Return stack (size = 0): []

  PC: 17 AR: 17 BR: 993



  [INFO]: ru.rmntim.csa4.comp.ControlUnit - 

  TICK 79 -- MPC: 27 / MicroInstruction: LatchBR, LatchMPCounter, MicroProgramCounterNext 

  Stack (size = 4): [993 | 913, 993, 0]
